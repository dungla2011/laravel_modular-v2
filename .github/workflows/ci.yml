name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017

    strategy:
      matrix:
        php-version: [8.2, 8.3]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, dom, filter, gd, json, mongodb-1.21.0
        coverage: xdebug
        tools: composer:v2
        
    - name: Verify MongoDB extension
      run: |
        php -m | grep mongodb
        php --ri mongodb
        
    - name: Wait for MongoDB
      run: |
        until php -r "try { \$m = new MongoDB\Driver\Manager('mongodb://localhost:27017'); \$m->executeCommand('admin', new MongoDB\Driver\Command(['ping' => 1])); echo 'MongoDB is ready'; } catch (Exception \$e) { echo 'Waiting for MongoDB...'; exit(1); }"; do
          echo "MongoDB not ready yet, waiting..."
          sleep 2
        done
        
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
        
    - name: Verify Laravel MongoDB package
      run: |
        composer show mongodb/laravel-mongodb
        php artisan --version
        
    - name: Copy environment file
      run: cp .env.example .env
      
    - name: Generate application key
      run: php artisan key:generate
      
    - name: Setup environment for testing
      run: |
        echo "DB_CONNECTION=mongodb" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=27017" >> .env
        echo "DB_DATABASE=laravel_test" >> .env
        echo "APP_ENV=testing" >> .env
        
    - name: Wait for MongoDB to be ready
      run: |
        until mongosh --host 127.0.0.1:27017 --eval "print('MongoDB is ready')"; do
          echo "Waiting for MongoDB..."
          sleep 2
        done
        
    - name: Run code style checks
      run: |
        if [ -f vendor/bin/pint ]; then
          vendor/bin/pint --test
        else
          echo "Laravel Pint not found, skipping code style checks"
        fi
        
    - name: Run static analysis
      run: |
        if [ -f vendor/bin/phpstan ]; then
          vendor/bin/phpstan analyse --memory-limit=2G
        else
          echo "PHPStan not found, skipping static analysis"
        fi
        
    - name: Run tests
      run: |
        php artisan test --coverage --coverage-clover=coverage.xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        
    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
      
    - name: Run security audit
      run: |
        if [ -f vendor/bin/security-checker ]; then
          vendor/bin/security-checker security:check composer.lock
        else
          composer audit
        fi

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        
    - name: Install dependencies
      run: composer install --prefer-dist --no-dev --optimize-autoloader
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install Node dependencies
      run: npm ci
      
    - name: Build assets
      run: npm run build
      
    - name: Create deployment artifact
      run: |
        mkdir -p artifacts
        tar -czf artifacts/laravel-app.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=.github \
          --exclude=tests \
          --exclude=storage/logs/* \
          --exclude=storage/framework/cache/* \
          --exclude=storage/framework/sessions/* \
          --exclude=storage/framework/views/* \
          .
          
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: laravel-app-${{ github.sha }}
        path: artifacts/laravel-app.tar.gz
        retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: laravel-app-${{ github.sha }}
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, scp, or deployment service API calls

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: laravel-app-${{ github.sha }}
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: rsync, scp, or deployment service API calls
